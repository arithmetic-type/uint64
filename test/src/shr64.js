import test from 'ava';

import { shr64 , get64 } from '../../src' ;

function macro (t, a, s, expected) {
	a = get64(...a);
	expected = get64(...expected);
	t.deepEqual(shr64(a, s), expected);
}

macro.title = (providedTitle, a, s, expected) => `${providedTitle} ${a} >>> ${s} === ${expected}`.trim();

test(macro, [0x00000000, 0x00000000],  0, [0x00000000, 0x00000000]);
test(macro, [0x00000000, 0x00000000], 53, [0x00000000, 0x00000000]);
test(macro, [0x00000000, 0x00000001],  1, [0x00000000, 0x00000000]);
test(macro, [0x00000000, 0x00000001], 60, [0x00000000, 0x00000000]);
test(macro, [0x80000000, 0x00000000],  1, [0x40000000, 0x00000000]);
test(macro, [0x80000000, 0x00000000], 60, [0x00000000, 0x00000008]);
test(macro, [0x00000000, 0x00000001],  0, [0x00000000, 0x00000001]);
test(macro, [0x00000000, 0x00000002],  0, [0x00000000, 0x00000002]);
test(macro, [0x00000001, 0x00000000],  0, [0x00000001, 0x00000000]);
test(macro, [0x00000002, 0x00000000],  0, [0x00000002, 0x00000000]);

test(macro, [0xFFFFFFFF, 0xFFFFFFFF],  0, [0xFFFFFFFF, 0xFFFFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF],  4, [0x0FFFFFFF, 0xFFFFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF],  8, [0x00FFFFFF, 0xFFFFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 12, [0x000FFFFF, 0xFFFFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 16, [0x0000FFFF, 0xFFFFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 20, [0x00000FFF, 0xFFFFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 24, [0x000000FF, 0xFFFFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 28, [0x0000000F, 0xFFFFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 32, [0x00000000, 0xFFFFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 36, [0x00000000, 0x0FFFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 40, [0x00000000, 0x00FFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 44, [0x00000000, 0x000FFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 48, [0x00000000, 0x0000FFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 52, [0x00000000, 0x00000FFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 56, [0x00000000, 0x000000FF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 60, [0x00000000, 0x0000000F]);
// this is how >>> 32 behaves in javascript
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 64, [0xFFFFFFFF, 0xFFFFFFFF]);

test(macro, [0x01234567, 0x89ABCDEF],  0, [0x01234567, 0x89ABCDEF]);
test(macro, [0x01234567, 0x89ABCDEF],  4, [0x00123456, 0x789ABCDE]);
test(macro, [0x01234567, 0x89ABCDEF],  8, [0x00012345, 0x6789ABCD]);
test(macro, [0x01234567, 0x89ABCDEF], 12, [0x00001234, 0x56789ABC]);
test(macro, [0x01234567, 0x89ABCDEF], 16, [0x00000123, 0x456789AB]);
test(macro, [0x01234567, 0x89ABCDEF], 20, [0x00000012, 0x3456789A]);
test(macro, [0x01234567, 0x89ABCDEF], 24, [0x00000001, 0x23456789]);
test(macro, [0x01234567, 0x89ABCDEF], 28, [0x00000000, 0x12345678]);
test(macro, [0x01234567, 0x89ABCDEF], 32, [0x00000000, 0x01234567]);
test(macro, [0x01234567, 0x89ABCDEF], 36, [0x00000000, 0x00123456]);
test(macro, [0x01234567, 0x89ABCDEF], 40, [0x00000000, 0x00012345]);
test(macro, [0x01234567, 0x89ABCDEF], 44, [0x00000000, 0x00001234]);
test(macro, [0x01234567, 0x89ABCDEF], 48, [0x00000000, 0x00000123]);
test(macro, [0x01234567, 0x89ABCDEF], 52, [0x00000000, 0x00000012]);
test(macro, [0x01234567, 0x89ABCDEF], 56, [0x00000000, 0x00000001]);
test(macro, [0x01234567, 0x89ABCDEF], 60, [0x00000000, 0x00000000]);
test(macro, [0x01234567, 0x89ABCDEF], 64, [0x01234567, 0x89ABCDEF]);
