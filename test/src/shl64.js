import test from 'ava';

import { shl64 , get64 } from '../../src' ;

function macro (t, a, s, expected) {
	a = get64(...a);
	expected = get64(...expected);
	t.deepEqual(shl64(a, s), expected);
}

macro.title = (providedTitle, a, s, expected) => `${providedTitle || ''} ${a} << ${s} === ${expected}`.trim();

test(macro, [0x00000000, 0x00000000],  0, [0x00000000, 0x00000000]);
test(macro, [0x00000000, 0x00000000], 53, [0x00000000, 0x00000000]);
test(macro, [0x00000000, 0x00000001],  1, [0x00000000, 0x00000002]);
test(macro, [0x00000000, 0x00000001], 60, [0x10000000, 0x00000000]);
test(macro, [0x80000000, 0x00000000],  1, [0x00000000, 0x00000000]);
test(macro, [0x80000000, 0x00000000], 60, [0x00000000, 0x00000000]);
test(macro, [0x00000000, 0x00000001],  0, [0x00000000, 0x00000001]);
test(macro, [0x00000000, 0x00000002],  0, [0x00000000, 0x00000002]);
test(macro, [0x00000001, 0x00000000],  0, [0x00000001, 0x00000000]);
test(macro, [0x00000002, 0x00000000],  0, [0x00000002, 0x00000000]);

test(macro, [0xFFFFFFFF, 0xFFFFFFFF],  0, [0xFFFFFFFF, 0xFFFFFFFF]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF],  4, [0xFFFFFFFF, 0xFFFFFFF0]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF],  8, [0xFFFFFFFF, 0xFFFFFF00]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 12, [0xFFFFFFFF, 0xFFFFF000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 16, [0xFFFFFFFF, 0xFFFF0000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 20, [0xFFFFFFFF, 0xFFF00000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 24, [0xFFFFFFFF, 0xFF000000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 28, [0xFFFFFFFF, 0xF0000000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 32, [0xFFFFFFFF, 0x00000000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 36, [0xFFFFFFF0, 0x00000000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 40, [0xFFFFFF00, 0x00000000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 44, [0xFFFFF000, 0x00000000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 48, [0xFFFF0000, 0x00000000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 52, [0xFFF00000, 0x00000000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 56, [0xFF000000, 0x00000000]);
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 60, [0xF0000000, 0x00000000]);
// this is how << 32 behaves in javascript
test(macro, [0xFFFFFFFF, 0xFFFFFFFF], 64, [0xFFFFFFFF, 0xFFFFFFFF]);

test(macro, [0x01234567, 0x89ABCDEF],  0, [0x01234567, 0x89ABCDEF]);
test(macro, [0x01234567, 0x89ABCDEF],  4, [0x12345678, 0x9ABCDEF0]);
test(macro, [0x01234567, 0x89ABCDEF],  8, [0x23456789, 0xABCDEF00]);
test(macro, [0x01234567, 0x89ABCDEF], 12, [0x3456789A, 0xBCDEF000]);
test(macro, [0x01234567, 0x89ABCDEF], 16, [0x456789AB, 0xCDEF0000]);
test(macro, [0x01234567, 0x89ABCDEF], 20, [0x56789ABC, 0xDEF00000]);
test(macro, [0x01234567, 0x89ABCDEF], 24, [0x6789ABCD, 0xEF000000]);
test(macro, [0x01234567, 0x89ABCDEF], 28, [0x789ABCDE, 0xF0000000]);
test(macro, [0x01234567, 0x89ABCDEF], 32, [0x89ABCDEF, 0x00000000]);
test(macro, [0x01234567, 0x89ABCDEF], 36, [0x9ABCDEF0, 0x00000000]);
test(macro, [0x01234567, 0x89ABCDEF], 40, [0xABCDEF00, 0x00000000]);
test(macro, [0x01234567, 0x89ABCDEF], 44, [0xBCDEF000, 0x00000000]);
test(macro, [0x01234567, 0x89ABCDEF], 48, [0xCDEF0000, 0x00000000]);
test(macro, [0x01234567, 0x89ABCDEF], 52, [0xDEF00000, 0x00000000]);
test(macro, [0x01234567, 0x89ABCDEF], 56, [0xEF000000, 0x00000000]);
test(macro, [0x01234567, 0x89ABCDEF], 60, [0xF0000000, 0x00000000]);
test(macro, [0x01234567, 0x89ABCDEF], 64, [0x01234567, 0x89ABCDEF]);
